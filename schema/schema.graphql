type Query {
  topics(type: TopicType, nodeId: Int, offset: Int, limit: Int): [Topic!]
  topic(id: ID!): Topic
  me: UserMe!
  nodes: [Node!]
  node(id: ID!): Node
  users(limit: Int): [User]
  # user(id: ID!): User
}

enum TopicType {
  LAST_ACTIVED
  RECENT
  NO_REPLY
  POPULAR
  EXCELLENT
}

type UserMe {
  id: ID!
  login: String!
  name: String!
  avatarUrl: String!
  location: String!
  company: String!
  twitter: String!
  website: String!
  tagline: String!
  github: String!
  createdAt: String!
  topicsCount: Int!
  repliesCount: Int!
  followingCount: Int!
  followersCount: Int!
  favoritesCount: Int!
  level: String!
  levelName: String!
  bio: String
  email: String!
  # abilities: Abilities
}

type Abilities {
  update: Boolean
  destroy: Boolean
  ban: Boolean
  normal: Boolean
  excellent: Boolean
  unexcellent: Boolean
  close: Boolean
  open: Boolean
}

type User {
  id: ID!
  login: String!
  name: String!
  avatarUrl: String!
  abilities: Abilities
}

type Topic {
  id: ID!
  title: String
  createdAt: String
  updatedAt: String
  repliedAt: String
  repliesCount: Int
  nodeName: String
  nodeId: Int
  lastReplyUserId: String
  lastReplyUserLogin: String
  grade: String
  likesCount: Int
  suggestedAt: String
  closedAt: String
  deleted: Boolean
  excellent: Int
  hits: Int
  abilities: Abilities
  user: User
}

type Node {
  id: String!
  name: String!
  summary: String!
  sectionId: String!
  sectionName: String!
  topicsCount: String!
  sort: Int!
  updated_at: String!
}
